#!/usr/bin/env python

import os
import time
from datetime import datetime

import xcffib
import xcffib.render
import xcffib.randr

from xcffibär.sourcePatterns import Color
from xcffibär.Theme import Theme
from xcffibär.atoms import initAtoms
from xcffibär.utils import Perimeter, QuitApplication, inspect
from xcffibär.timers import addInterval, triggerElapsedTimers
from xcffibär import Bar, chunks, Window


theme = Theme({
    'foreground': Color('8f8'),
    'background': Color('222'),
    'defaultChunkStyle': {
        'foreground': Color('fff'),
        'background': Color('000'),
        #'fontFamily': 'monospace',
        'fontFamily': 'Input Mono',
    },
    'chunkStyles': {
        # Text styles
        'Text': {
            'fontSize': '11px',
            'padding': Perimeter(0, 12, -1, 4),
        },
        'title': {
            'foreground': Color('555'),
            'fontSize': '8px',
            'padding': Perimeter(3),
        },
        'net-address': {
            'fontSize': '11px',
        },
        'clock': {
            'foreground': Color('999'),
            'fontSize': '10px',
            'padding': Perimeter(0, 4),
        },

        # Image styles
        'icon': {
            'padding': Perimeter(0, 1, 1, 1),
        },
        'icon-clock': {
            'image': '/usr/share/icons/Adwaita/16x16/apps/preferences-system-time-symbolic.symbolic.png',
            'padding': Perimeter(1, 0, 0, 1),
            'background': Color('448'),
        },
        'icon-net-wired': {
            'image': '/usr/share/icons/Adwaita/16x16/devices/network-wired-symbolic.symbolic.png',
            'padding': Perimeter(0, 0, 1, 1),
        },
        'icon-net-wireless': {
            'image': '/usr/share/icons/Adwaita/16x16/devices/network-wireless-symbolic.symbolic.png',
            'padding': Perimeter(0, 0, 1, 0),
        },
        'icon-info': {
            'background': Color('888'),
        },
        'icon-active': {
            'background': Color('080'),
        },
        'icon-inactive': {
            'background': Color('555'),
        },

        # Graph styles
        'Graph': {
            'padding': Perimeter(3),
            'background': Color('555'),
            'trough': Color('111'),
            'foreground': Color('0f0'),
        },
    },
})


def setupBar(bar):
    bar.addLeft(
        chunks.Text('xcffibär', styles='title')
    )

    #bar.addChunkCenter(chunks.Text('xcffibär', styles='title'))

    clock = chunks.Text(datetime.now().strftime('%Y-%m-%d %H:%M:%S'), styles='clock')

    def updateClock():
        clock.text = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')
        bar.paint()

    addInterval(0.01, updateClock)

    bar.addRight(
        clock,
        #chunks.Image('/usr/share/icons/Moka/16x16/apps/clock.png', styles='icon'),
        chunks.Image(styles='icon-clock icon'),

        #chunks.Separator(width=8, height=18),

        chunks.Text('192.168.128.98', styles='net-address'),
        chunks.Image(styles='icon-net-wired icon-active icon'),

        #chunks.Separator(width=8, height=18),

        chunks.Text(''),
        chunks.Image(styles='icon-net-wireless icon-inactive icon'),

        #chunks.Separator(width=8, height=18),

        chunks.Graph(value=3, maxValue=10, width=50, height=18),
    )


def run():
    conn = xcffib.connect(display=os.getenv('DISPLAY'))
    conn.render = conn(xcffib.render.key)

    screens = conn.get_screen_pointers()

    initAtoms(conn)

    screenIndex = 0
    rootDepth = screens[screenIndex].root_depth
    rootVisual = screens[screenIndex].root_visual

    depthInfo = [
        d
        for d in conn.get_setup().roots.list[screenIndex].allowed_depths.list
        if d.depth == rootDepth
    ][0]

    visualType = [
        v
        for v in depthInfo.visuals.list
        if v.visual_id == rootVisual
    ][0]

    dummy = Window(conn, screens[screenIndex], visualType.visual_id)

    randr = conn(xcffib.randr.key)

    print('GetScreenResources:')
    screenResources = randr.GetScreenResources(dummy.id).reply()
    inspect(screenResources)

    crtcInfoCookies = [(crtc, randr.GetCrtcInfo(crtc, 0)) for crtc in screenResources.crtcs]
    for crtc, crtcInfoCookie in crtcInfoCookies:
        crtcInfo = crtcInfoCookie.reply()
        if crtcInfo.num_outputs:
            print(f'Creating bar for crtc {crtc}.')
            setupBar(Bar(conn, screens[screenIndex], visualType, theme, height=17, screenExtents=crtcInfo))
        else:
            print(f'(crtc {crtc} disabled)')

    dummy.close()

    while True:
        try:
            #event = conn.wait_for_event()
            event = conn.poll_for_event()
        except xcffib.ProtocolException as error:
            print("\x1b[91mProtocol error %s received!\x1b[m" % (error.__class__.__name__, ))
            break
        except Exception as error:
            print("\x1b[91mUnexpected %s received:\x1b[m %s" % (error.__class__.__name__, error))
            for key in dir(error):
                val = getattr(error, key)
                if not callable(val):
                    print('  %s: %r' % (key, val))
            break

        if event:
            print('\x1b[93mIncoming %s:\x1b[m' % (event.__class__.__name__, ))
            inspect(event)

            windowID = event.window if hasattr(event, 'window') else event.event
            try:
                Window.windowsByID[windowID].handleEvent(event)
            except QuitApplication:
                break

        elif conn.has_error():
            print("\x1b[91mConnection error received!\x1b[m")
            break

        else:
            time.sleep(0.005)

        triggerElapsedTimers()

    for window in Window.windowsByID.values():
        if hasattr(window, 'cleanUp') and callable(window.cleanUp):
            window.cleanUp()

    conn.disconnect()


run()
