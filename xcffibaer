#!/usr/bin/env python
'''A themeable status bar written in Python, using xcffib.

'''
import asyncio
import os
import sys
from datetime import datetime

import xcffib
import xcffib.render
import xcffib.randr

from dateutil.tz import gettz
import i3ipc
import netifaces
import statgrab

from xcffibär.sourcePatterns import Color
from xcffibär.Theme import Theme
from xcffibär.atoms import initAtoms
from xcffibär.utils import Perimeter, QuitApplication, inspect, printError, printInfo
from xcffibär.timers import addInterval, triggerElapsedTimers
from xcffibär import Bar, chunks, Window, XSetup


TICK_LENGTH = 0.005
SCREEN_INDEX = 0


theme = Theme({
    'foreground': Color('8f8'),
    #'background': Color('222'),
    'background': Color('000c'),
    'defaultChunkStyle': {
        'foreground': Color('fff'),
        'background': Color('0000'),
        #'fontFamily': 'monospace',
        'fontFamily': 'Input Mono Narrow',
        'fontStretch': 'condensed',
    },
    'chunkStyles': {
        # Text styles
        'Text': {
            'fontSize': '11px',
            'padding': Perimeter(3, 12, 4, 4),
        },
        'title': {
            'foreground': Color('555'),
            'fontSize': '8px',
            'padding': Perimeter(6, 4, 4),
        },
        'net-address': {
            'fontSize': '11px',
        },
        'clock': {
            'foreground': Color('bbb'),
            'fontSize': '10px',
            'padding': Perimeter(4),
        },
        'clock-alt': {
            'foreground': Color('777'),
        },

        'workspace': {
            'foreground': Color('999'),
            'padding': Perimeter(3, 8, 4, 8),
        },
        'workspace-visible': {
            'foreground': Color('ddd'),
        },
        'workspace-focused': {
            'foreground': Color('f80'),
            'background': Color('0005'),
        },
        'workspace-urgent': {
            'foreground': Color('f42'),
            'background': Color('5005'),
        },

        'mode': {
            'foreground': Color('fff'),
            'background': Color('5855'),
            'fontSize': '8px',
            'padding': Perimeter(6, 8, 4),
        },
        'hidden': {
            'padding': Perimeter(0),
        },

        # Image styles
        'icon': {
            'padding': Perimeter(2, 1, 3, 1),
        },
        'icon-clock': {
            'image': '/usr/share/icons/Adwaita/16x16/apps/preferences-system-time-symbolic.symbolic.png',
            'padding': Perimeter(3, 0, 2, 1),
            'foreground': Color('448'),
        },
        'icon-net-wired': {
            'image': '/usr/share/icons/Adwaita/16x16/devices/network-wired-symbolic.symbolic.png',
            'padding': Perimeter(2, 0, 3, 1),
        },
        'icon-net-wireless': {
            'image': '/usr/share/icons/Adwaita/16x16/devices/network-wireless-symbolic.symbolic.png',
            'padding': Perimeter(2, 0, 3, 0),
        },
        'icon-info': {
            'foreground': Color('888'),
        },
        'icon-active': {
            'foreground': Color('080'),
        },
        'icon-inactive': {
            'foreground': Color('555'),
        },

        # Graph styles
        'Graph': {
            'padding': Perimeter(3),
            'trough': Color('2228'),
            'foregrounds': [
                Color('0f0'),  # user
                Color('f00'),  # kernel
                Color('00f'),  # nice
                Color('f0f'),  # swap
                Color('555'),  # iowait
            ]
        },
        'HistoryGraph': {
            'padding': Perimeter(1, 4),
            'trough': Color('0004'),
            'foregrounds': [
                Color('0f0'),  # user
                Color('f00'),  # kernel
                Color('00f'),  # nice
                Color('f0f'),  # swap
                Color('555'),  # iowait
            ]
        },
    },
})


def setupBar(bar, outputs, i3conn):
    # Clock
    clockFormat = '%Y-%m-%d %H:%M:%S.%f'
    altTimezone = gettz('Europe/Berlin')
    clock = chunks.Text(datetime.now().strftime(clockFormat)[:-3], styles='clock')
    clockAlt = chunks.Text(datetime.now(altTimezone).strftime(clockFormat)[:-3] + ' (Berlin)', styles='clock-alt clock')

    def updateClock():
        clock.text = datetime.now().strftime(clockFormat)[:-3]
        clockAlt.text = datetime.now(altTimezone).strftime(clockFormat)[:-3] + ' (Berlin)'
        bar.paint()
    addInterval(0.01, updateClock)

    # CPU usage
    cpuHistoryGraph = chunks.HistoryGraph(maxValue=100, width=100, height=21)

    def updateCPUGraph():
        cpuPercents = statgrab.sg_get_cpu_percents()
        cpuHistoryGraph.values = [
            cpuPercents['user'],
            cpuPercents['kernel'],
            cpuPercents['nice'],
            cpuPercents['swap'],
            cpuPercents['iowait'],
        ]
        bar.paint()
    addInterval(0.2, updateCPUGraph)

    # i3 workspaces
    def onWorkspaceClick(workspace):
        i3conn.command(f'workspace {workspace.name}')
    i3Workspaces = chunks.Switcher(
        choices=[workspace for workspace in i3conn.get_workspaces() if workspace['output'] in outputs],
        choiceStylePrefix='workspace',
        onChoiceClick=onWorkspaceClick,
    )

    def onWorkspaceUpdate(_i3conn, event):
        printInfo('onWorkspaceUpdate:')
        inspect(event)
        i3Workspaces.choices = [workspace for workspace in i3conn.get_workspaces() if workspace['output'] in outputs]
    i3conn.on('workspace::focus', onWorkspaceUpdate)
    i3conn.on('workspace::urgent', onWorkspaceUpdate)
    i3conn.on('workspace::empty', onWorkspaceUpdate)

    # i3 mode display
    i3Mode = chunks.Text('', styles='hidden')

    def onModeChange(_i3conn, event):
        printInfo('onModeChange:')
        inspect(event)
        i3Mode.text = '' if event.change == 'default' else event.change
        i3Mode.styles = ['hidden'] if event.change == 'default' else ['mode']
    i3conn.on('mode', onModeChange)

    # Networking
    ethernetIPText = chunks.Text('', styles='net-address')
    ethernetIcon = chunks.Image(styles='icon-net-wired icon icon-active')
    wifiIPText = chunks.Text('', styles='net-address')
    wifiIcon = chunks.Image(styles='icon-net-wireless icon icon-inactive')

    def updateNetwork():
        ethernetAddresses = []
        wifiAddresses = []
        for interface in netifaces.interfaces():
            addrs = netifaces.ifaddresses(interface).get(netifaces.AF_INET)
            if addrs:
                if interface[0] == 'e':
                    ethernetAddresses.extend(addr['addr'] for addr in addrs)
                elif interface[0] == 'w':
                    wifiAddresses.extend(addr['addr'] for addr in addrs)

        ethernetIPText.text = ', '.join(ethernetAddresses)
        ethernetIcon.styles = [*ethernetIcon.styles[:-1], 'icon-active' if ethernetAddresses else 'icon-inactive']

        wifiIPText.text = ', '.join(wifiAddresses)
        wifiIcon.styles = [*wifiIcon.styles[:-1], 'icon-active' if wifiAddresses else 'icon-inactive']
    addInterval(0.5, updateNetwork)

    # Bar layout
    bar.addLeft(
        i3Workspaces,
        i3Mode,
        chunks.Text('xcffibär', styles='title'),
    )

    #bar.addCenter(chunks.Text('xcffibär', styles='title'))

    bar.addRight(
        clock,
        clockAlt,
        #chunks.Image('/usr/share/icons/Moka/16x16/apps/clock.png', styles='icon'),
        chunks.Image(styles='icon-clock icon'),

        #chunks.Separator(width=8, height=18),

        ethernetIPText,
        ethernetIcon,

        #chunks.Separator(width=8, height=18),

        wifiIPText,
        wifiIcon,

        #chunks.Separator(width=8, height=18),

        cpuHistoryGraph,
    )


def handleWindowEvent(event):
    printInfo(f'Incoming {event.__class__.__name__}:')
    inspect(event)

    windowID = event.window if hasattr(event, 'window') else event.event
    Window.windowsByID[windowID].handleEvent(event)


def run():
    conn = xcffib.connect(display=os.getenv('DISPLAY'))
    conn.randr = conn(xcffib.randr.key)
    conn.render = conn(xcffib.render.key)

    screens = conn.get_screen_pointers()

    initAtoms(conn)

    depthInfo = [
        d
        for d in conn.get_setup().roots.list[SCREEN_INDEX].allowed_depths.list
        if d.depth == 32
    ][0]

    printInfo('depthInfo:')
    inspect(depthInfo)

    visualType = [
        v
        for v in depthInfo.visuals.list
        if v._class == xcffib.xproto.VisualClass.TrueColor  # pylint: disable=protected-access
    ][0]

    printInfo('visualType:')
    inspect(visualType)

    xSetup = XSetup(conn, screens[SCREEN_INDEX], depthInfo, visualType, theme)

    dummy = Window(xSetup)

    printInfo('GetScreenResources:')
    screenResources = conn.randr.GetScreenResources(dummy.id).reply()
    inspect(screenResources)

    statgrab.sg_init()

    i3conn = i3ipc.Connection()

    wrappedI3Command = i3conn.command

    def i3Command(command):
        print(f'Sending i3 command: {repr(command)}')
        sys.stdout.flush()
        wrappedI3Command(command)

    i3conn.command = i3Command

    crtcInfoCookies = [(crtc, conn.randr.GetCrtcInfo(crtc, 0)) for crtc in screenResources.crtcs]
    for crtc, crtcInfoCookie in crtcInfoCookies:
        crtcInfo = crtcInfoCookie.reply()
        if crtcInfo.num_outputs:
            printInfo(f'Creating bar for crtc {crtc}.')
            outputs = [
                conn.randr.GetOutputInfo(output, 0).reply().name.raw.decode('utf8')
                for output in crtcInfo.outputs
            ]
            printInfo('outputs:', outputs)
            setupBar(Bar(xSetup, height=21, screenExtents=crtcInfo, name=outputs[0]), outputs, i3conn)
        else:
            print(f'(crtc {crtc} disabled)')

    dummy.close()

    loop = asyncio.get_event_loop()

    def shutdown():
        printInfo('Shutting down.')
        loop.stop()

    def xcbPoll():
        while True:
            try:
                #event = conn.wait_for_event()
                event = conn.poll_for_event()
            except xcffib.ProtocolException as error:
                printError(f'Protocol error {error.__class__.__name__} received!')
                shutdown()
                break
            except Exception as error:  # pylint: disable=broad-except
                printError(f'Unexpected {error.__class__.__name__} received:', error)
                inspect(error)
                shutdown()
                break

            if conn.has_error():
                printError('Connection error received!')
                shutdown()
                break

            elif not event:
                break

            try:
                handleWindowEvent(event)
            except QuitApplication:
                shutdown()
                break

    #TODO: Rework timers to use `asyncio.ensure_future`
    # See: https://stackoverflow.com/questions/45419723/python-timer-with-asyncio-coroutine#45430833
    async def runTimers():
        while True:
            await asyncio.sleep(TICK_LENGTH)

            triggerElapsedTimers()

    try:
        i3conn.event_socket_setup()

        loop.add_reader(conn.get_file_descriptor(), xcbPoll)
        loop.add_reader(i3conn.sub_socket, i3conn.event_socket_poll)

        loop.create_task(runTimers())
        loop.run_forever()

    finally:
        i3conn.event_socket_teardown()

        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()

        for window in Window.windowsByID.values():
            if hasattr(window, 'cleanUp') and callable(window.cleanUp):
                window.cleanUp()

    conn.disconnect()


run()
