#!/usr/bin/env python
'''A themeable status bar written in Python, using xcffib.

'''
from dateutil.tz import gettz
import netifaces
import statgrab

from xcffibaer_lib import chunks, FSReader
from xcffibaer_lib.main import run
from xcffibaer_lib.sourcePatterns import Color
from xcffibaer_lib.Theme import Theme
from xcffibaer_lib.timers import addInterval
from xcffibaer_lib.Timespec import Timespec
from xcffibaer_lib.utils import Perimeter, inspect, printInfo


batteryDevice = 'BAT1'

theme = Theme({
    'foreground': Color('8f8'),
    #'background': Color('222'),
    'background': Color('000c'),
    'defaultChunkStyle': {
        'foreground': Color('fff'),
        'background': Color('0000'),
        'fontSize': '11px',
        #'fontFamily': 'monospace',
        #'fontFamily': 'Input Mono',
        'fontFamily': 'Input Mono Narrow',
        #'fontStretch': 'condensed',
    },
    'chunkStyles': {
        # Text styles
        'Text': {
            'padding': Perimeter(3, 12, 4, 4),
        },
        'title': {
            'foreground': Color('555'),
            'fontSize': '8px',
            'padding': Perimeter(6, 4, 4),
        },
        'net-address': {
        },
        'clock': {
            'foreground': Color('bbb'),
            'fontSize': '10px',
            'padding': Perimeter(4),
        },
        'clock-alt': {
            'foreground': Color('777'),
        },

        'battery': {
            'foreground': Color('080'),
        },

        'workspace': {
            'foreground': Color('999'),
            'padding': Perimeter(3, 8, 4, 8),
        },
        'workspace-visible': {
            'foreground': Color('ddd'),
        },
        'workspace-focused': {
            'foreground': Color('f80'),
            'background': Color('0005'),
        },
        'workspace-urgent': {
            'foreground': Color('f42'),
            'background': Color('5005'),
        },

        'mode': {
            'foreground': Color('fff'),
            'background': Color('5855'),
            'fontSize': '8px',
            'padding': Perimeter(6, 8, 4),
        },
        'hidden': {
            'padding': Perimeter(0),
        },

        'text-warn': {
            'foreground': Color('bb0'),
        },
        'text-critical': {
            'foreground': Color('f00'),
        },

        # Image styles
        'icon': {
            'padding': Perimeter(2, 1, 3, 1),
        },
        'icon-expand': {
            'image': '/usr/share/icons/Adwaita/16x16/actions/pan-down-symbolic.symbolic.png',
            'padding': Perimeter(3, 0, 2, 1),
            'foreground': Color('aaa'),
        },
        'icon-clock': {
            'image': '/usr/share/icons/Adwaita/16x16/apps/preferences-system-time-symbolic.symbolic.png',
            'padding': Perimeter(3, 0, 2, 1),
            'foreground': Color('448'),
        },
        'icon-net-wired': {
            'image': '/usr/share/icons/Adwaita/16x16/devices/network-wired-symbolic.symbolic.png',
            'padding': Perimeter(2, 0, 3, 1),
        },
        'icon-net-wireless': {
            'image': '/usr/share/icons/Adwaita/16x16/devices/network-wireless-symbolic.symbolic.png',
            'padding': Perimeter(2, 0, 3, 0),
        },
        'icon-battery': {
            'image': '/usr/share/icons/Adwaita/16x16/devices/battery-symbolic.symbolic.png',
            'padding': Perimeter(2, 0, 3, 0),
            'foreground': Color('080'),
        },
        'icon-info': {
            'foreground': Color('888'),
        },
        'icon-active': {
            'foreground': Color('080'),
        },
        'icon-inactive': {
            'foreground': Color('555'),
        },

        'icon-warn': {
            'foreground': Color('bb0'),
        },
        'icon-critical': {
            'foreground': Color('f00'),
        },

        # Graph styles
        'Graph': {
            'padding': Perimeter(3),
            'trough': Color('2228'),
            'foregrounds': [
                Color('0f0'),  # user
                Color('f00'),  # kernel
                Color('00f'),  # nice
                Color('f0f'),  # swap
                Color('555'),  # iowait
            ]
        },
        'HistoryGraph': {
            'padding': Perimeter(1, 4),
            'trough': Color('0004'),
            'foregrounds': [
                Color('0f0'),  # user
                Color('f00'),  # kernel
                Color('00f'),  # nice
                Color('f0f'),  # swap
                Color('555'),  # iowait
            ]
        },
    },
})


def setupStore(store, i3conn):
    timespecs = [
        Timespec('local', '%a %Y-%m-%d %H:%M:%S'),
        #Timespec('berlin', '%a %H:%M', gettz('Europe/Berlin'), locale='de_DE'),
        Timespec('berlin', '%a %H:%M', gettz('Europe/Berlin')),
        #Timespec('sf', '%a %H:%M', gettz('America/Los_Angeles')),
    ]

    def updateClock():
        for timespec in timespecs:
            store['time.' + timespec.tag] = timespec.render()
    #addInterval(0.1, updateClock)
    addInterval(0.5, updateClock)

    def updateCPUStats():
        store['cpu.percents'] = statgrab.sg_get_cpu_percents()
    addInterval(0.5, updateCPUStats)

    def onWorkspaceUpdate(_i3conn, event):
        printInfo('onWorkspaceUpdate:')
        inspect(event)
        store['i3.workspaces'] = i3conn.get_workspaces()
    i3conn.on('workspace::focus', onWorkspaceUpdate)
    i3conn.on('workspace::urgent', onWorkspaceUpdate)
    i3conn.on('workspace::empty', onWorkspaceUpdate)

    def onModeChange(_i3conn, event):
        printInfo('onModeChange:')
        inspect(event)
        store['i3.mode'] = event.change
    i3conn.on('mode', onModeChange)

    def updateNetwork():
        ethernetAddresses = []
        wifiAddresses = []
        for interface in netifaces.interfaces():
            addrs = netifaces.ifaddresses(interface).get(netifaces.AF_INET)
            if addrs:
                if interface[0] == 'e':
                    ethernetAddresses.extend(addr['addr'] for addr in addrs)
                elif interface[0] == 'w':
                    wifiAddresses.extend(addr['addr'] for addr in addrs)

        store['network.addresses.ethernet'] = ethernetAddresses
        store['network.addresses.wifi'] = wifiAddresses
    addInterval(0.5, updateNetwork)

    def tempTransform(value):
        return int(value) / 1000.0
    #TODO: Iterate over all thermal zones, and look for the ones with type 'pch_skylake' or 'iwlwifi'
    FSReader('/sys/class/thermal/thermal_zone5/temp', 'temp.cpu.die', store, transform=tempTransform).updateEvery(0.5)
    FSReader('/sys/class/thermal/thermal_zone4/temp', 'temp.wifi', store, transform=tempTransform).updateEvery(0.5)

    if batteryDevice:
        batterySysfsPath = f'/sys/class/power_supply/{batteryDevice}'
        FSReader(f'{batterySysfsPath}/charge_now', 'battery.charge.now', store, transform=int).updateEvery(1)
        FSReader(f'{batterySysfsPath}/charge_full', 'battery.charge.full', store, transform=int).updateEvery(1)
        FSReader(f'{batterySysfsPath}/charge_full_design', 'battery.charge.full_design', store, transform=int) \
            .updateEvery(1)


def setupBar(bar, store, outputs, i3conn):
    # Clock
    clock = chunks.Text(store.template('{time.local}'), styles='clock')
    clockAlt = chunks.Text(store.template('{time.berlin} (Berlin)'), styles='clock clock-alt')
    #clockAlt = chunks.Text(store.template('{time.sf} (SF)'), styles='clock clock-alt')

    # CPU usage
    cpuHistoryGraph = chunks.HistoryGraph(maxValue=100, width=100, height=21)

    def updateCPUGraph():
        cpuHistoryGraph.values = [
            store['cpu.percents.user'],
            store['cpu.percents.kernel'],
            store['cpu.percents.nice'],
            store['cpu.percents.swap'],
            store['cpu.percents.iowait'],
        ]
    store.watch('cpu.percents', updateCPUGraph)

    # Temperature
    temperatureCPU = chunks.Text('', styles='temperature-cpu temperature')
    temperatureWiFi = chunks.Text('', styles='temperature-wifi temperature')

    def updateTemperatures():
        temperatureCPU.text = store['temp.cpu.die']
        temperatureWiFi.text = store['temp.wifi']
    store.watch('temp', updateTemperatures)

    # i3 workspaces
    def onWorkspaceClick(workspace):
        i3conn.command(f'workspace {workspace.name}')
    i3Workspaces = chunks.Switcher(
        choices=[workspace for workspace in i3conn.get_workspaces() if workspace['output'] in outputs],
        choiceStylePrefix='workspace',
        onChoiceClick=onWorkspaceClick,
    )

    def onWorkspaceUpdate():
        i3Workspaces.choices = [workspace for workspace in store['i3.workspaces'] if workspace['output'] in outputs]
        #i3Workspaces.choices = [workspace for workspace in i3conn.get_workspaces() if workspace['output'] in outputs]
    store.watch('i3.workspaces', onWorkspaceUpdate)

    # i3 mode display
    i3Mode = chunks.Text('', styles='hidden')

    def onModeChange():
        mode = store['i3.mode']
        i3Mode.text = '' if mode == 'default' else mode
        i3Mode.styles = ['hidden'] if mode == 'default' else ['mode']
    store.watch('i3.mode', onModeChange)

    # Networking
    ethernetIPText = chunks.Text('', styles='net-address')
    ethernetIcon = chunks.Image(styles='icon-net-wired icon icon-active')
    wifiIPText = chunks.Text('', styles='net-address')
    wifiIcon = chunks.Image(styles='icon-net-wireless icon icon-inactive')

    def updateNetworkAddresses():
        ethernetAddresses = store['network.addresses.ethernet']
        ethernetIPText.text = ', '.join(ethernetAddresses)
        ethernetIcon.styles = [*ethernetIcon.styles[:-1], 'icon-active' if ethernetAddresses else 'icon-inactive']

        wifiAddresses = store['network.addresses.wifi']
        wifiIPText.text = ', '.join(wifiAddresses)
        wifiIcon.styles = [*wifiIcon.styles[:-1], 'icon-active' if wifiAddresses else 'icon-inactive']
    store.watch('network.addresses', updateNetworkAddresses)

    # Battery
    battery = chunks.Text('?%', styles='battery text-normal')
    batteryIcon = chunks.Image(styles='icon-battery icon icon-normal')

    def updateBattery():
        if store['battery.charge.now'] and store['battery.charge.full']:
            batteryPercent = store['battery.charge.now'] / store['battery.charge.full'] * 100
            battery.text = '{}%'.format(round(batteryPercent, 1))
            state = 'normal'
            if batteryPercent <= 10:
                state = 'critical'
            elif batteryPercent <= 30:
                state = 'warn'
            battery.styles = [*battery.styles[:-1], 'text-' + state]
            batteryIcon.styles = [*batteryIcon.styles[:-1], 'icon-' + state]
    store.watch('battery', updateBattery)

    # Bar layout
    bar.addLeft(
        i3Workspaces,
        i3Mode,
        chunks.Text('xcffibär', styles='title'),
    )

    #bar.addCenter(chunks.Text('xcffibär', styles='title'))

    bar.addRight(
        #chunks.Image(styles='icon-expand icon', onClick=lambda *a: runCommand('~/bin/toggle-systray')),

        clock,
        clockAlt,
        #chunks.Image('/usr/share/icons/Moka/16x16/apps/clock.png', styles='icon'),
        chunks.Image(styles='icon-clock icon'),

        #chunks.Separator(width=8, height=18),

        ethernetIPText,
        ethernetIcon,

        #chunks.Separator(width=8, height=18),

        wifiIPText,
        wifiIcon,

        #chunks.Separator(width=8, height=18),

        cpuHistoryGraph,

        battery,
        batteryIcon,

        temperatureCPU,
        temperatureWiFi,
        #chunks.Image(styles='icon-temperature icon'),
        chunks.Text('🌡', styles='icon'),
    )


run(theme, setupBar, setupStore, onInit=statgrab.sg_init)
